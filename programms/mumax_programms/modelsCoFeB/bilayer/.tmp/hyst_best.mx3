// Эта программа моделирует MgO/CofeB/Ta/CoFeB/MgO

// Глобальные конфиги
OutputFormat = OVF2_TEXT
EnableDemag=false
MinimizerStop = 1e-6
Multiplier := pow(10, -4) // для перевода Oe -> T
AntiMultiplier := pow(10, 4) // для перевода T -> Oe

// ячейка дискретизации, в м
XYcellsize := 5e-9
Zcellsize := 0.3e-9

// количества ячеек в моделировании
Xcount := 300
Ycount := 300
Zcount := 10
N_PBC := 0						// number of extra images for PBC

SetMesh(Xcount, Ycount, Zcount, XYcellsize, XYcellsize, Zcellsize, N_PBC, N_PBC, 0)

// реальные размеры
Xsize := Xcount * XYcellsize
Ysize := Ycount * XYcellsize
Zsize := Zcount * Zcellsize

// зададим толщины слоев, в м
Th_Top := 3 * Zcellsize
Th_Spac := 3 * Zcellsize
Th_Bot := 4 * Zcellsize

// Geometry
Shape_All := Cuboid(Xsize, Ysize, Zsize)
Spacer := Cuboid(Xsize, Ysize, Th_Spac) // Ta слой
Spacer1 := Spacer.transl(0, 0, (Th_Bot+Th_Spac/2) - (Th_Bot+Th_Spac+Th_Top)/2)
Multilayer:= Shape_All.sub(Spacer1)
SetGeom(Multilayer)

DefRegion(1, Zrange( (-Th_Bot-Th_Spac-Th_Top)/2, (Th_Bot-Th_Spac-Th_Top)/2 )) // CoFeB, bottom layer
DefRegion(2, Zrange( (Th_Bot+Th_Spac-Th_Top)/2, (Th_Bot+Th_Spac+Th_Top)/2 )) // CoFeB, top layer
save(regions)

// Параметры материалов
Ms_top := 700e3 // A/m
Kanis_top := 2e3 // J/m^3
Ms_bot := 1200e3 // A/m
Kanis_bot := 2.5e3 // J/m^3
Jex := 1e-11 // J/m
Jaf := -0.6e-5 // J/m^2

// Задаем параметры bottom layer
Msat.SetRegion(1, Ms_bot)
AnisU.SetRegion(1, vector(0, 0, 1))
Ku1.SetRegion(1, Kanis_bot)
Aex.SetRegion(1, Jex)

// Задаем параметры top layer
Msat.SetRegion(2, Ms_top)
AnisU.SetRegion(2, vector(0, 0, 1))
Ku1.SetRegion(2, Kanis_top)
Aex.SetRegion(2, Jex)

TableAdd(B_exch)
TableAdd(MaxAngle)

// Initial Magnetisation
m.setRegion(1, uniform(0, 0, 1))
m.setRegion(2, uniform(0, 0, -1))

// Гистерезис, Oe
Bmax  := 100 * Multiplier
Bstep :=  1 * Multiplier
TableAdd(B_ext)

SaveAs(m, "m_inital")

for B:=Bstep; B<=Bmax; B+=Bstep{
    B_ext = vector(0.1*B, 0, B)
    minimize()
    tablesave()
    B_Oe := B * AntiMultiplier
    SaveAs(m, sprintf("%s%3.0f%s", "m_", B_Oe, "Oe.ovf"))
}
SaveAs(m, "m_saturation")

for B:=Bmax; B>=-Bmax; B-=Bstep{
    B_ext = vector(0.01*B, 0, B)
    minimize()
    //tablesave()
}
SaveAs(m, "m_negative_saturation")

for B:=-Bmax; B<=Bmax; B+=Bstep{
    B_ext = vector(0.01*B, 0, B)
    minimize()
    //tablesave()
}

SaveAs(m, "m_end")