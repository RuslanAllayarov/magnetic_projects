/*
    This program simulates MgO / CofeB / Ta / CoFeB / MgO
    Here I will try to do it easier - scale the exchange between layers (they touch)
    I simulate in-plane hysteresis, when field aimed at hard axis
*/

// ------------START CONFIGS ----------------------------------

// ------------Global configs ----------------------------------
OutputFormat = OVF2_TEXT
EnableDemag = false
Multiplier := 1e-4 // для перевода Oe -> T
AntiMultiplier := pow(10, 4) // для перевода T -> Oe


// ------- may be they are needed ------------------------------
RandSeed(0)
ThermSeed(0)
RandomMagSeed(0)
MinimizerSamples = 20 //Number of max dM for convergence check
MinimizerStop = 1e-7 //Stopping max dM for Minimize


// ------------Geometry configs ----------------------------------
Сellsize := 0.8e-9
Th_Bot_orig := 1.1 * 1e-9
Th_Bot_model := 0.8 * 1e-9
Xcount := 500
Ycount := 500
Zcount := 2
N_PBC := 0


// ------------Material configs ----------------------------------
Ms_top := 600e3 // A/m
Kanis_top := 3e5 // J/m^3
Ms_bot := 1300e3 // A/m
Kanis_bot := 3.64e5 // J/m^3
Jex := 1.3e-11 // J/m
RKKY := -1.38e-5 // J/m^2


// ------------Hysteresis configs ----------------------------------
Bmax  := 3000 * Multiplier
Bstep := 100 * Multiplier


// -------------- END CONFIGS ----------------------------------


SetMesh(Xcount, Ycount, Zcount, Сellsize, Сellsize, Сellsize, N_PBC, N_PBC, 0)


DefRegion(0, layer(0)) // bottom layer
DefRegion(1, layer(1)) // top layer
//Save(regions)


// Top layer parameters
Msat.SetRegion(1, Ms_top)
AnisU.SetRegion(1, vector(0, 0, 1))
Ku1.SetRegion(1, Kanis_top)
Aex.SetRegion(1, Jex)

// Bottom layer parameters
Msat.SetRegion(0, Ms_bot * Th_Bot_orig / Th_Bot_model) // recalculate Ms_bottom
AnisU.SetRegion(0, vector(0, 0, 1))
Ku1.SetRegion(0, Kanis_bot * Th_Bot_orig / Th_Bot_model) // recalculate Kanis_bot
Aex.SetRegion(0, Jex)


// Initial magnetisation state
m.setRegion(0, uniform(-100, 1, -1)) // bottom
m.setRegion(1, uniform(-100, 1, -1)) // top


// RKKY interaction
scale := (RKKY * Сellsize) / (2 * Aex.Average())
ext_scaleExchange(0, 1, scale)


TableAdd(B_ext)
TableAdd(m_full)
SaveAs(m, "m_inital")

//------------------------Hard Axis Hysteresis---------------------------
/* 
    P+ <--> P-: we pass from field -Bmax to +Bmax and go back 
*/
// P- -> P+
for B:=-Bmax; B<=Bmax; B+=Bstep{
    B_ext = vector(0, 0.01*B, B)
    relax()
    tablesave()
    B_Oe := B * AntiMultiplier
    print("[P-->P+]:", "Field = ", B_Oe, "m_full_x = ", m_full.Comp(0))
    SaveAs(m, sprintf("%s%3.0f%s", "ForwardScan_magn_", B_Oe, "Oe.ovf"))
}
// P+ -> P-
for B:=Bmax; B>=-Bmax; B-=Bstep{
    B_ext = vector(0, 0.01*B, B)
    relax()
    tablesave()
    B_Oe := B * AntiMultiplier
    print("[P+->P-]:", "Field = ", B_Oe, "m_full_x = ", m_full.Comp(0))
    SaveAs(m, sprintf("%s%3.0f%s", "BackwardScan_magn_", B_Oe, "Oe.ovf"))
}




// -----------------------------UNUSED COMMANDS -----------------------------


// Соответствует P+ -> AP+ переходу
//for B:=Bmax; B>=Bstep; B-=Bstep{
//    B_ext = vector(0.1*B, 0.1*B, B)
//    // внутри сделаем свой подцикл
//	if B >= B_trans && B <= B_trans_end {
//        print("[P+->AP+]:Сlose to the switching field")
//        relax()
//    } else {
//        print("[P+->AP+]:Away from the switching field")
//        minimize()
//    }
//    tablesave()
//    B_Oe := B * AntiMultiplier
//    print("[P+->AP+]:", "Field = ", B_Oe, "m_full_z = ", m_full.Comp(2))
//    SaveAs(m, sprintf("%s%3.0f%s", "BackwardScan_magn_", B_Oe, "Oe.ovf"))
//}
//SaveAs(m, "m_negative_saturation")
