// Эта программа моделирует MgO/CofeB/MgO

// Глобальные конфиги
OutputFormat = OVF2_TEXT
EnableDemag=false
MinimizerStop = 1e-6

Multiplier := 1000 / (4 * pi) // Oe -> A/m
Multiplier_2 := pow(10, -7) * (4 * pi) // для перевода A/m -> T


Xcellsize := 5e-9 // в м
Ycellsize := 5e-9
Zcellsize := 0.3e-9

Xcount := 400 // по сути количество ячеек
Ycount := 400
Zcount := 3

Xsize := Xcount * Xcellsize // реальный размер
Ysize := Ycount * Ycellsize
Zsize := Zcount * Zcellsize

SetPBC(2,2,0) //периодические граничные условия
SetGridsize(Xcount, Ycount, Zcount)
SetCellsize(Xcellsize, Ycellsize, Zcellsize)

geometryShape := Cuboid(Xsize, Ysize, Zsize) // задаем кубоид
SetGeom(geometryShape)
SaveAs(geom, "cuboid") // сохраняет факт принадлежности каждой ячейки к определенному региону

DefRegion(1, geometryShape)
SaveAs(regions, "OneRegion")

// Параметры материала
Ms := 952e3 // A/m
Kanis := 4e3 // J/m^3
//Kanis := 7.5e6
Jex := 1e-11 // J/m

Msat.SetRegion(1, Ms)
AnisU.SetRegion(1, vector(0, 0, 1))
Ku1.SetRegion(1, Kanis)
Aex.SetRegion(1, Jex)

m.SetRegion(1, uniform(2,  1, -100)) // начальная намагниченность по OZ
SaveAs(m, "InitMagn")

// Задаем поле: наночастица + внешнее
// EXTERNAL
angle := 30 // angle = (Hext, normal)
Hext := 0 // module of external field, Oe

//NP
mmean := 287e-18 // Magnetic moment of particle, Am^2
rmean := 140e-9 // R particle, m
moment := mmean * 8.0           
frac := pow((moment/mmean), 0.333)
rpart := rmean * frac

zadd := 2.4e-9 // добавочное поднятие частицы над платформой, м
xpart := 0
ypart := 0
zpart := Zsize / 2 + rpart + zadd

Fieldmask := newVectorMask(Xcount, Ycount, Zcount)

currmoment := (mmean / pow(rmean, 3)) * pow(rpart,3)
anglerad := (angle / 180.0) * pi

for i:=0; i<Xcount; i++{
	for j:=0; j<Ycount; j++{
        for k:=0; k<Zcount; k++{
            rvector := index2coord(i, j, k) // получаем координаты в метрах 
            x := rvector.X()
            y := rvector.Y()
            z := rvector.Z()

            rx := x - xpart
            ry := y - ypart
            rz := z - zpart

            r := sqrt(pow(rx, 2) + pow(ry, 2) + pow(rz, 2))

            Hz := (1/(4*pi))*(3*rz*currmoment*(sin(anglerad)*ry + cos(anglerad)*rz)/pow(r, 5) - currmoment*cos(anglerad)/pow(r, 3))
            Hy := (1/(4*pi))*(3*ry*currmoment*(sin(anglerad)*ry + cos(anglerad)*rz)/pow(r, 5) - currmoment*sin(anglerad)/pow(r, 3))
            Hx := (1/(4*pi))*(3*rx*currmoment*(sin(anglerad)*ry + cos(anglerad)*rz)/pow(r, 5))

            // Add external field
            // будем считать, что поле внешнее лежит в плоскости OYZ
            hextx := Multiplier * 0
            hexty := Multiplier * Hext * sin(anglerad)
            hextz := Multiplier * Hext * cos(anglerad)
            Htotalx := Hx + hextx
            Htotaly := Hy + hexty
            Htotalz := Hz + hextz

            // Здесь суммарное поле в A/m -> переводим в Т
            Fieldmask.setVector(i, j, k, vector(Htotalx*Multiplier_2, Htotaly*Multiplier_2, Htotalz*Multiplier_2))
        }
	}
}

B_ext.add(Fieldmask, 1)
Save(B_ext)
TableAdd(B_ext)
TableAdd(E_total)

//Minimize()
relax() // релаксим
//Run(1e-9)

SaveAs(m, "AfterAll")
SnapshotAs(m, "AfterAll.png")
tablesave()