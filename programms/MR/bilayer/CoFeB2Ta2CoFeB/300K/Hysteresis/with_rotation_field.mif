# MIF 2.1
# This is file for modeling magnetization distribution
# of CoFeB/Ta/CoFeB
# under action of stray field of NP with some moment, radius,
# and we have external field (Hext + angle)
set pi [expr {4*atan(1.0)}]
set mu0 [expr {4*$pi*1e-7}]

######### Magnetic parameters #######
set P_nuc	0		;# доли 1 гиперпараметр
set Mstop	700e3		;# A/m проверил
set Msbot	1200e3		;# A/m проверил
set Jaf		-0.6e-5	;# J/m^2 проверил
set Jafbiquadro	0		;# J/m^2 биквадратичный обмен
set Jex		1.3e-11		;# J/m гиперпараметр
set Ktop	2e3		;# J/m^3 проверил
set Kbot	2.5e3		;# J/m^3 проверил

############### Hesteresis ###################
set Hmax 	450		;# Oe, пределы изменения поля

############### ATLAS & MESH #################
set Xcellsize   5	;# дискретизация вдоль X [нм]
set Ycellsize   5	;# дискретизация вдоль Y [нм]
set Zcellsize   0.3	;# дискретизация вдоль Z [нм]

set Xcount      200	;# число ячеек вдоль оси OX
set Ycount      200	;# число ячеек вдоль оси OY

set Xcellsize [expr {$Xcellsize*1e-9}]
set Ycellsize [expr {$Ycellsize*1e-9}]
set Zcellsize [expr {$Zcellsize*1e-9}]


set Xsize [expr {$Xcellsize * $Xcount}]
set Ysize [expr {$Ycellsize * $Ycount}]


set hbottom     1.2e-9  ;# толщина нижнего слоя, нм
set hbuffer     0.6e-9  ;# толщина промежуточного слоя, нм
set htop        0.9e-9  ;# толщина верхнего слоя, нм
set hadd        2.4e-9  ;# добавочное поднятие частицы над платформой, нм

################ Magnetic particle ###################
#set moment      287e-18     ;# Magnetic moment of particle, Anm^2
set moment      0     ;# Magnetic moment of particle, Anm^2
set rpart       70e-9      ;# R particle, nm

set xpart [ expr {$Xsize / 2} ]
set ypart [ expr {$Ysize / 2} ]
set zpart [ expr {$hbottom + $hbuffer + $htop + $rpart + $hadd} ]

################ External field #########################################
################ Описываем наклон внешнего поля гистерезиса##############
set angle       135                                   ;# angle = (Hext, normal)
set anglerad    [ expr { ($angle / 180.0) * $pi} ]  ;# angle in radian


Specify Oxs_MultiAtlas:atlas [subst {
    atlas { Oxs_BoxAtlas {
        name top
        xrange {0 $Xsize}
        yrange {0 $Ysize}
        zrange {[expr {$hbottom + $hbuffer}]  [expr {$hbottom + $hbuffer + $htop}]}
    } }
    atlas { Oxs_BoxAtlas {
        name spacer
        xrange {0 $Xsize}
        yrange {0 $Ysize}
        zrange {$hbottom [ expr {$hbottom + $hbuffer} ]}
    } }
    atlas { Oxs_BoxAtlas {
        name bottom
        xrange {0 $Xsize}
        yrange {0 $Ysize}
        zrange {0 $hbottom}
    } }
} ]


Specify Oxs_RectangularMesh:mesh [subst {
  cellsize {$Xcellsize $Ycellsize $Zcellsize}
  atlas :atlas
}]

Specify Oxs_LinearScalarField:zheight {
 vector {0 0 1}
 norm   1.0
}

Specify Oxs_TwoSurfaceExchange:AF [subst {
 sigma $Jaf
 sigma2 $Jafbiquadro
 surface1 {
         atlas  :atlas
        region  bottom
   scalarfield  :zheight
   scalarvalue  1.2e-9
    scalarside  -
 }
 surface2 {
         atlas  :atlas
        region  top
   scalarfield  :zheight
   scalarvalue  1.8e-9
    scalarside  +
 }
} ]

proc FieldPart { x y z } {
  global rpart moment xpart ypart zpart pi
  set rx [ expr {$x - $xpart} ]
  set ry [ expr {$y - $ypart} ]
  set rz [ expr {$z - $zpart} ]
  set currmoment [ expr {($moment / (70e-9)**3) * ($rpart**3)} ]
  set r  [ expr { ($rx)**2 + ($ry)**2 + ($rz)**2 } ]
  set r  [ expr {$r**0.5} ]
  set Hz [ expr { (1/(4*$pi))*(3*(-1*$currmoment)*($rz**2)/($r**5) + $currmoment/($r**3)) } ]
  set Hy [ expr { (1/(4*$pi))*(3*(-1*$currmoment)*$rz*$ry)/($r**5) } ]
  set Hx [ expr { (1/(4*$pi))*(3*(-1*$currmoment)*$rz*$rx)/($r**5) } ]
  return [list $Hx $Hy $Hz]
}


Specify Oxs_FixedZeeman:fieldofpart [subst {
  field { Oxs_ScriptVectorField::fieldp {
     atlas :atlas
     script FieldPart
     script_args rawpt
     }
  }
}]

# Переделал
Specify Oxs_UZeeman [subst {
  multiplier [ expr {1000 / (4 * $pi)} ]
  Hrange {
     {  0   [expr {-450 * sin($anglerad)}]  [expr {-450 * cos($anglerad)}]  1   [expr {-100 * sin($anglerad)}]  [expr {-100 * cos($anglerad)}]  10  }
     {  1   [expr {-100 * sin($anglerad)}]  [expr {-100 * cos($anglerad)}]  0   [expr {100 * sin($anglerad)}]   [expr {100 * cos($anglerad)}]   10  }
     {  0   [expr {100 * sin($anglerad)}]   [expr {100 * cos($anglerad)}]   1   [expr {450 * sin($anglerad)}]   [expr {450 * cos($anglerad)}]   10  }
     {  1   [expr {450 * sin($anglerad)}]   [expr {450 * cos($anglerad)}]   0   [expr {100 * sin($anglerad)}]   [expr {100 * cos($anglerad)}]   10  }
     {  0   [expr {100 * sin($anglerad)}]   [expr {100 * cos($anglerad)}]   1   [expr {-100 * sin($anglerad)}]  [expr {-100 * cos($anglerad)}]  10  }
     {  1   [expr {-100 * sin($anglerad)}]  [expr {-100 * cos($anglerad)}]  0   [expr {-450 * sin($anglerad)}]  [expr {-450 * cos($anglerad)}]  10  }
  }
}]

Specify Oxs_Exchange6Ngbr [ subst {
  atlas :atlas
  default_A $Jex
  A {
    spacer spacer 0
    spacer bottom 0
    spacer top    0
  }
} ]

Specify Oxs_UniaxialAnisotropy [ subst {
   K1  { Oxs_AtlasScalarField {
      atlas :atlas
      default_value 0
      values {
         top    $Ktop
         bottom $Kbot
      }
   }}
   axis { Oxs_AtlasVectorField {
      atlas :atlas
      default_value {0 0 1}
      values {
         top    {0 0 1}
         bottom {0 0 1}
      }
   }}
} ]


proc RandomMs { x y z } {
    global P_nuc Mstop Msbot
    set test [expr {rand()}]
    if { $z <= 1.2e-9 } {
        if { $test <= $P_nuc } {
          return [ expr {$Msbot*rand()} ]
        } else {
            return $Msbot
        }
    } else { if { $z >= 1.8e-9 } {
          if { $test <= $P_nuc } {
            return [ expr {$Mstop*rand()} ]
          } else {
              return $Mstop
          }
        }
      }
    return 0
}

Specify Oxs_CGEvolve {}

#stage_iteration_limit 300
#stopping_mxHxm 0.1
Specify Oxs_MinDriver {
 basename CoFeBTaCoFeB
 evolver Oxs_CGEvolve
 stage_iteration_limit 500
 stopping_mxHxm 0.1
 mesh :mesh
 Ms  { Oxs_ScriptScalarField {
      atlas :atlas
      script {RandomMs}
      script_args rawpt
 }}
 m0  { Oxs_AtlasVectorField {
     atlas :atlas
     norm 1.0
     default_value {0 0 1}
     values {
        top     {0 0 -1}
        bottom  {0 0 -1}
     }
 }}
 normalize_aveM_output 0
 report_max_spin_angle 1
}

