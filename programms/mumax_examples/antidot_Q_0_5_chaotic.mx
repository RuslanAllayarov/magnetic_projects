// set material parameters

Qf := 0.5						// Q-factor [-]

K1 :=  7069						// magnetic anisotropy constant [J/m3]
A1 := 6.2e-12					// exchange constant [J/m] | Hasegawa 1975
Ms1 := sqrt(K1/Qf/2/pi*1e7)		// saturation magnetization [A/m]
th_dist := 5					// EA standard deviation from OZ (deg.)

// set geometrical parameters

H_period := 90.0e-9				// distance between holes [m]
H_diam := 60.0e-9				// diameter of holes [m]

H_shift := 12.0e-9				// standard deviation of chaotic shift of antidot centers [m]

h := 30e-9						// thickness of the film [m]
cellsize := 3e-9				// cell size [m]

holesx := 8 					// number of holes along x | SHOULD BE EVEN
holesy := 8						// number of holes along y | SHOULD BE EVEN

dx := trunc(H_period/cellsize)
dy := trunc(sqrt(3)*H_period/2/cellsize)
Nx := dx*holesx
Ny := dy*holesy
Nz := trunc(h/cellsize)

// set grid and cell size

SetPBC(8, 8, 0)	// extra images on left and right sides
SetGridSize(Nx, Ny, Nz)
SetCellSize(cellsize, cellsize, cellsize)

B_N := 40
//Bmax  := max(2*K1/Ms1, 4*pi*Ms1*1e-7)
Bmax  := 0.2 // 0.001 - 0.2
Bstep :=  Bmax/B_N

sq := cuboid(Nx*cellsize, Ny*cellsize, Nz*cellsize)
hole := cylinder(H_diam,Nz*cellsize)

for a := 0; a < (holesy+1); a++{
	y_shift := dy*cellsize*(a-holesy/2)
	if remainder(a,2) == 0 {
		for b := 0; b < (holesx+1); b++{
			x_shift := dx*cellsize*(b-holesx/2) + H_shift*randNorm()
			y_shift2 := y_shift + H_shift*randNorm()
			border := (b == 0) || (b == holesx) || (a == 0) || (a == holesy)			
			if border {
				x_shift = dx*cellsize*(b-holesx/2)
				y_shift2 = y_shift
				//print("border control:",a,b)
			}		
			hole = hole.add(cylinder(H_diam,Nz*cellsize).transl(x_shift, y_shift2, 0))
			//print("EVEN | coordinates:",x_shift*1e+9,y_shift*1e+9)
		}
	} else {
		for b := 0; b < (holesx); b++{
			x_shift := dx*cellsize*(b-holesx/2) + dx*cellsize/2 + H_shift*randNorm()
			y_shift2 := y_shift + H_shift*randNorm()
			border := (b == 0) || (b == (holesx-1))
			if border {
				x_shift := dx*cellsize*(b-holesx/2) + dx*cellsize/2
				y_shift2 := y_shift
				//print("border control:",a,b)
			}
			hole = hole.add(cylinder(H_diam,Nz*cellsize).transl(x_shift, y_shift2, 0))
			//print("ODD  | coordinates:",x_shift*1e+9,y_shift*1e+9)
		}
	}
}

antidot := sq.sub(hole)
setgeom(antidot)
saveas(geom, "antidot_structure.ovf")

for a := 0; a < Nx; a++{
	for b := 0; b < Ny; b++{
		for c := 0; c < Nz; c++{
			m := randInt(255)
			DefRegionCell(m, a, b, c)
		}
	}
}

DefRegion(255, hole)
save(regions)

for j := 0; j <= 254; j++{
	Msat.setregion(j, Ms1)
	Aex.setregion(j, A1)
	Ku1.setregion(j, K1)
	th := randNorm()*th_dist/180*pi
	fi := 2*pi*rand()
	anisU.setRegion(j, vector(sin(fi)*sin(th), cos(fi)*sin(th), cos(th)))
}

m = uniform(0,0.1,1.0)	
B_ext = vector(0, 0, Bmax)
relax()

B_appl := 0.0
B_dem_x := 0.0
B_dem_y := 0.0
B_dem_z := 0.0

TableAddVar(B_appl, "B", "T")
TableAddVar(B_dem_x, "B_dem_x", "T")
TableAddVar(B_dem_y, "B_dem_y", "T")
TableAddVar(B_dem_z, "B_dem_z", "T")

B_ind := 0
	
	for B := Bmax; B >= -Bmax; B -= Bstep{
		B_ext = vector(0, 0, B)
		minimize()
		
		B_appl = B
	
		B_dem_x = 0
		B_dem_y = 0
		B_dem_z = 0
		
		for j := 0; j <= 254; j++{
			B_dem_x = B_dem_x + B_demag.Comp(0).Region(j).Average()/255
			B_dem_y = B_dem_y + B_demag.Comp(1).Region(j).Average()/255
			B_dem_z = B_dem_z + B_demag.Comp(2).Region(j).Average()/255
		}

		tablesave()
		
		saveas(B_demag, sprint("MS_",B_ind,".ovf"))
		saveas(m, sprint("point_",B_ind,".ovf"))
		snapshot(m)
		
		B_ind = B_ind + 1
		print("Done ",B_ind," of (",B_N*2,")")
	}
